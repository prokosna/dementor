// +build integration

package main

import (
	"testing"

	"github.com/prokosna/dementor/lib"
)

// The successful series of processes
func TestSuccessStory(t *testing.T) {
	// authenticate
	authenticateReq := &dementor.AuthenticateReq{
		CommonConf: dementor.Config,
	}
	authenticateRes, err := dementor.Authenticate(authenticateReq)
	if err != nil {
		t.Fatal(err)
	}
	if authenticateRes.SessionId == "" {
		t.Fatal("No session id")
	}
	sessionId := authenticateRes.SessionId

	// Create a project
	projectName := "IntegrationTest"
	createProjectReq := &dementor.CreateProjectReq{
		Name:        projectName,
		Description: "Generated by an integration test.",
		CommonConf:  dementor.Config,
	}
	createProjectRes, err := dementor.CreateProject(
		sessionId,
		createProjectReq,
	)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("Project was created: %+v", createProjectRes)

	// Upload a test zip
	uploadProjectZipReq := &dementor.UploadProjectZipReq{
		Project:    projectName,
		FilePath:   "./assets/test.zip",
		CommonConf: dementor.Config,
	}
	uploadProjectZipRes, err := dementor.UploadProjectZip(
		sessionId,
		uploadProjectZipReq,
	)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("Zip file was uploaded: %+v", uploadProjectZipRes)

	// Fetch flows
	fetchFlowsReq := &dementor.FetchFlowsProjectReq{
		Project:    projectName,
		CommonConf: dementor.Config,
	}
	fetchFlowsRes, err := dementor.FetchFlowsProject(
		sessionId,
		fetchFlowsReq,
	)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("Fetched a project: %+v", fetchFlowsRes)
	projectId := fetchFlowsRes.ProjectId
	flowId := fetchFlowsRes.Flows[0].FlowId

	// Fetch jobs
	fetchJobsReq := &dementor.FetchJobsFlowReq{
		Project:    projectName,
		Flow:       flowId,
		CommonConf: dementor.Config,
	}
	fetchJobsRes, err := dementor.FetchJobsFlow(
		sessionId,
		fetchJobsReq,
	)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("Fetched a jobs: %+v", fetchJobsRes)

	// Schedule a flow
	scheduleFlowReq := &dementor.ScheduleFlowReq{
		ProjectName:    projectName,
		Flow:           flowId,
		CronExpression: "0 23/30 5,7-10 ? * 6#3",
		CommonConf:     dementor.Config,
	}
	scheduleFlowRes, err := dementor.ScheduleFlow(
		sessionId,
		scheduleFlowReq,
	)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("Scheduled a flow: %+v", scheduleFlowRes)

	// Fetch a schedule
	fetchScheduleReq := &dementor.FetchScheduleReq{
		ProjectId:  projectId,
		FlowId:     flowId,
		CommonConf: dementor.Config,
	}
	fetchScheduleRes, err := dementor.FetchSchedule(
		sessionId,
		fetchScheduleReq,
	)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("Fetched a schedule: %+v", fetchScheduleRes)
	scheduleId := fetchScheduleRes.ScheduleId

	// Unschedule a schedule
	unscheduleFlowReq := &dementor.UnscheduleFlowReq{
		ScheduleId: scheduleId,
		CommonConf: dementor.Config,
	}
	err = dementor.UnscheduleFlow(
		sessionId,
		unscheduleFlowReq,
	)
	if err != nil {
		t.Fatal(err)
	}

	// Confirm if the schedule is unscheduled
	_, err = dementor.FetchSchedule(
		sessionId,
		fetchScheduleReq,
	)
	if err == nil {
		t.Fatal("The schedule is not unscheduled")
	}

	// Delete the project
	deleteProjectReq := &dementor.DeleteProjectReq{
		Project:    projectName,
		CommonConf: dementor.Config,
	}
	err = dementor.DeleteProject(
		sessionId,
		deleteProjectReq,
	)
	if err != nil {
		t.Fatal(err)
	}
}
